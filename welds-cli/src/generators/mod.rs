pub(crate) mod db_type_lookup;
pub(crate) mod models;

pub(crate) fn name_sanitize(name: impl Into<String>) -> String {
    let n = name.into();
    match n.as_str() {
        "as" => "as_".to_owned(),
        "break" => "break_".to_owned(),
        "const" => "const_".to_owned(),
        "continue" => "continue_".to_owned(),
        "crate" => "crate_".to_owned(),
        "else" => "else_".to_owned(),
        "enum" => "enum_".to_owned(),
        "extern" => "extern_".to_owned(),
        "false" => "false_".to_owned(),
        "fn" => "fn_".to_owned(),
        "for" => "for_".to_owned(),
        "if" => "if_".to_owned(),
        "impl" => "impl_".to_owned(),
        "in" => "in_".to_owned(),
        "let" => "let_".to_owned(),
        "loop" => "loop_".to_owned(),
        "match" => "match_".to_owned(),
        "mod" => "mod_".to_owned(),
        "move" => "move_".to_owned(),
        "mut" => "mut_".to_owned(),
        "pub" => "pub_".to_owned(),
        "ref" => "ref_".to_owned(),
        "return" => "return_".to_owned(),
        "self" => "self_".to_owned(),
        "Self" => "Self_".to_owned(),
        "static" => "static_".to_owned(),
        "struct" => "struct_".to_owned(),
        "super" => "super_".to_owned(),
        "trait" => "trait_".to_owned(),
        "true" => "true_".to_owned(),
        "type" => "type_".to_owned(),
        "unsafe" => "unsafe_".to_owned(),
        "use" => "use_".to_owned(),
        "where" => "where_".to_owned(),
        "while" => "while_".to_owned(),
        "async" => "async_".to_owned(),
        "await" => "await_".to_owned(),
        "dyn" => "dyn_".to_owned(),
        "abstract" => "abstract_".to_owned(),
        "become" => "become_".to_owned(),
        "box" => "box_".to_owned(),
        "do" => "do_".to_owned(),
        "final" => "final_".to_owned(),
        "macro" => "macro_".to_owned(),
        "override" => "override_".to_owned(),
        "priv" => "priv_".to_owned(),
        "typeof" => "typeof_".to_owned(),
        "unsized" => "unsized_".to_owned(),
        "virtual" => "virtual_".to_owned(),
        "yield" => "yield_".to_owned(),
        "try" => "try_".to_owned(),
        "union" => "union_".to_owned(),
        _ => n,
    }
}
