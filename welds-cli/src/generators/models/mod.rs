use crate::config::{Config, Table};
use crate::errors::Result;
use crate::GenerateOption;
use rust_format::{Formatter, RustFmt};
use std::fs;
use std::fs::File;
use std::io::prelude::*;
use std::path::PathBuf;
mod struct_def;

pub(crate) const GENERATED_WARNING: &str = "
/******************************************************************************
 * This file was auto-generated by welds-cli.
 * changes to this file will be overridden when the welds-cli generate command runs again.
******************************************************************************/
";

pub fn run(config: &Config, opt: &GenerateOption) -> Result<()> {
    let all = &config.tables;

    for table in all {
        if opt.table.is_none() || opt.table == Some(table.name.to_string()) {
            let path = model_path(&opt.output_path, table);
            fs::create_dir_all(&path)?;
            init_mod_file(&path)?;
            struct_def::generate(&path, table, all.as_slice())?;
        }
    }

    Ok(())
}

fn init_mod_file(path: &PathBuf) -> Result<()> {
    let mut path = PathBuf::from(path);
    path.push("mod.rs");
    if path.exists() {
        return Ok(());
    }

    let code = quote::quote! {
        mod definition;
        pub use definition::*;
    };

    let mut file = File::create(path)?;
    let formated = RustFmt::default().format_str(code.to_string()).unwrap();
    file.write_all(formated.as_bytes())?;
    Ok(())
}

fn model_path(start_dir: &PathBuf, table: &Table) -> PathBuf {
    let mut path = PathBuf::from(start_dir);
    path.push(table.module_name());
    path
}
