/******************************************************************************
 * This file was auto-generated by welds.
 * changes to this file will be overridden when Welds generate runs again.
******************************************************************************/

use welds_core::query::clause::QueryBuilderAdder;
use welds_core::query::clause::{Clause, ClauseOpt};
use welds_core::query::optional::Optional;
use welds_core::table::TableInfo;

type Select<'args> = welds_core::query::select::SelectBuilder<'args, Order, OrderSchema>;

#[derive(Debug, Clone, sqlx::FromRow)]
pub struct Order {
    pub id: i32,
    pub name: Option<String>,
    pub price: Option<f64>,
}

pub struct OrderSchema {
    pub id: Clause<i32>,
    pub name: ClauseOpt<Optional<String>>,
    pub price: ClauseOpt<Optional<f64>>,
}

impl Default for OrderSchema {
    fn default() -> Self {
        Self {
            id: Clause::new("id"),
            name: ClauseOpt::new("name"),
            price: ClauseOpt::new("price"),
        }
    }
}

impl TableInfo for OrderSchema {
    fn identifier() -> &'static str {
        "orders"
    }
    fn columns() -> &'static [&'static str] {
        &["id", "name", "price"]
    }
}

impl Order {
    pub fn all<'args>() -> Select<'args> {
        Select::new()
    }
    pub fn where_col<'args>(
        lam: impl Fn(OrderSchema) -> Box<dyn QueryBuilderAdder<'args>>,
    ) -> Select<'args> {
        let select = Select::new();
        select.where_col(lam)
    }
}
